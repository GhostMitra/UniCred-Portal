generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum AccessType {
  student
  recruiter
  university
}

enum CredentialType {
  bachelor
  master
  certificate
  diploma
}

enum CredentialStatus {
  verified
  pending
  expired
  revoked
}

model User {
  id          String     @id @default(cuid())
  username    String     @unique
  email       String?    @unique
  fullName    String?
  passwordHash String
  accessType  AccessType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  student     Student?
}

model Student {
  id           String       @id @default(cuid())
  userId       String       @unique
  name         String
  email        String       @unique
  status       String
  did          String       @unique
  walletJwk    Json

  user         User         @relation(fields: [userId], references: [id])
  credentials  Credential[]
}

model Credential {
  id            String            @id @default(cuid())
  title         String
  type          CredentialType
  institution   String
  dateIssued    DateTime
  status        CredentialStatus  @default(pending)

  studentId     String?
  student       Student?          @relation(fields: [studentId], references: [id])

  // Verifiable Credential fields
  vcJwt         String?
  vcHash        String?           @unique

  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  events        LedgerEvent[]

  // Visibility workflow
  recruiterApproved Boolean       @default(false)
  studentAccepted   Boolean       @default(false)
}

model LedgerEvent {
  id            String   @id @default(cuid())
  eventType     String
  credentialId  String?
  details       Json
  createdAt     DateTime @default(now())

  credential    Credential? @relation(fields: [credentialId], references: [id])
}

// Simple local blockchain for anchoring (append-only)
model Block {
  id            String   @id @default(cuid())
  height        Int      @unique
  previousHash  String
  payloadHash   String
  nonce         Int
  hash          String   @unique
  createdAt     DateTime @default(now())
}

